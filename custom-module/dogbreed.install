<?php

use GuzzleHttp\Client;
use Drupal\node\Entity\NodeType;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\views\Views;
use Drupal\views\Entity\View;

/**
 * Ativação do campo breed_name após a instalação inicial do módulo
 */
function dogbreed_update_9154() {
  // Recupera a definição do campo.
  $field_definition = FieldConfig::loadByName('node', 'ctype_dogbreed', 'breed_name');

  // Ativa o campo se ele existir.
  if ($field_definition) {
    $field_definition->set('status', TRUE);
    if ($field_definition->save()) {
      // Adiciona uma mensagem de sucesso.
      \Drupal::messenger()->addStatus(t('O novo campo breed_name foi ativado.'));
    }
  }
}

/**
 * Obtém as raças da API e popula como termos de taxonomia
 */
function dogbreed_update_9155() {
	// Obtém as raças da API.
	$client = new Client();
	$response = $client->get('https://dog.ceo/api/breeds/list/all');
	$data = json_decode($response->getBody(), true);

	// Cria os termos de taxonomia.
  $taxonomy_vid = 'taxonomies_dogbreeds';
	if (isset($data['message']) && is_array($data['message'])) {
    $count_term = 0;
    $count_subterm = 0;

		foreach ($data['message'] as $breed => $subBreeds) {
			// Verifica se o termo já existe antes de criar.
      $existing_term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'name' => $breed,
          'vid' => $taxonomy_vid,
        ]);

			if (empty($existing_term)) {
        $term = Term::create([
					'name' => $breed,
					'vid' => $taxonomy_vid,
        ]);
        if ($term->save()) {
          $count_term ++;
        }
			} else {
			  $term = reset($existing_term);
			}

			foreach ($subBreeds as $subBreed) {
        $sub_term_name = "$breed-$subBreed";

        // Verifica se o subtermo já existe antes de criar.
        $existing_sub_terms = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadByProperties([
            'name' => $sub_term_name,
            'vid' => $taxonomy_vid,
        ]);

        if (empty($existing_sub_term)) {
					$sub_term = Term::create([
						'name' => $sub_term_name,
						'vid' => $taxonomy_vid,
						'parent' => [$term->id()],
					]);

					if ($sub_term->save()) {
            $count_subterm ++;
          }
        }
			}
		}
    \Drupal::messenger()->addStatus(t('Foram adicionados %terms termos e %subterms subtermos ao vocabulário %vocabulary.', ['%terms' => $count_term, '%subterms' => $count_subterm, '%vocabulary' => 'Dog Breeds']));
	}
}
/**
 * Cria a view importando um arquivo de configuração...
 */
function dogbreed_update_9156() {

  $drushCommand = 'drush cim --partial --source=modules/custom/dogbreed/config-partial/create-view -y';

  $output = shell_exec($drushCommand);

  echo "Saída do comando Drush:\n";
  echo $output;
}

/**
 * Cria 10 nodes do tipo ctype_dogbreed através de Devel Generate...
 */
function dogbreed_update_9157() {

  $drushCommand = 'drush genc 10 --bundles ctype_dogbreed --kill';

  $output = shell_exec($drushCommand);

  echo "Saída do comando Drush:\n";
  echo $output;
}

/**
 * Verifica e exclui um elemento se ele existir.
 *
 * @param object $element
 *   O elemento a ser verificado e excluído.
 */
function dogbreed_check_and_delete($element) {
  if ($element) {
    $element->delete();
  }
}

/**
 * Implements hook_uninstall().
 */
function dogbreed_uninstall() {
  // Verifica e exclui o tipo de conteúdo personalizado.
  $content_type = NodeType::load('ctype_dogbreed');
  dogbreed_check_and_delete($content_type);

  // Verifica e exclui o vocabulário de taxonomia.
  $vocabulary = Vocabulary::load('taxonomies_dogbreeds');
  dogbreed_check_and_delete($vocabulary);

  // Verifica e exclui a view personalizada.
  $view_machine_name = 'custom_dogbreed_view';
  $view = Views::getView($view_machine_name);
  dogbreed_check_and_delete($view);
}
